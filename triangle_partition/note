classify_half
	点群の半分を分類してsolvedに入れる。
	vec <= 入力されたベクトル列を半分に分割したもの
	vecr <= vecの前半分を回転させたもの
	vecrr <= vecの後半分を2回回転させたもの
	p1 <= vecr[vec.size()/6]をもとに戻したやつと(1,0)を結んだ直線と、vec[vec.size()/2]と原点が交わる点を得る。
	p2 <= vecrr[vec.size()/6]をもとに戻したやつを(0,1)を結んだ直線と、vec[vec.size()/2]と原点が交わる点を得る。
	p1.x < p2.xならば、vecr[vec.size()/6]をもとに戻した点群を該当のsolvedに入れる。

rotate
	(0,0)をrotateすると(1,0)に移動
	(1,0)をrotateすると(0,1)に移動
	(0,1)をrotateすると(0,0)に移動

vec
	                |
	                v
	vec  [0,1,2,3,4,5,6,7,8,9]
	vecr [  1,2,3,4,5]
	vecrr            [6,7,8,9]

	vecr [0,1,  3,4,5]
	vecrr            [6,7,8,9]

	vecr [0,1,2,3,4,5]
	vecrr            [6,7,  9]
	erase[0,2,8]

次の点集合を得る方法
	消すやつが確定する->消さないやつも確定する
	消さないやつを合算していく。

最後の3点選択メソッド
	(1,0)と(0,1)から点を選んでチェック
	選ばれた2点の交点が2点を対角線とする長方形の中に入っていなければその点はNG
	選ばれた2点の交点と(1,0)(0,1)を結んだ3角形の中に残りの1点が入っていればNG
	(1,0)の方は、rotate(true)したときに、p1より上にあったらOK
		p1.rotate(true) > p3.rotate(true)
	(0,1)の方は、rotateしたときに、p2より下にあったらOK
		p2.rotate() < p3.rotate()
	下にある->コサインは大きい
	上にある->コサインは小さい


検証作業
	回転なし -> solved[2]がsolved[1]より上にあることを示す
		 isがsolved[1]より下
		 isがsolved[2]より上
	rotate -> solved[0]がsolved[2]より上にあることを示す
	rotate(true) -> solved[1]がsolved[0]より上にあることを示す